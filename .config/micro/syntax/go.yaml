filetype: go

detect:
    filename: "\\.go$"

rules:
    # Conditionals and control flow
    - special: "\\b(break|case|continue|default|go|goto|range|return)\\b"
    - statement: "\\b(else|for|if|switch)\\b"
    - preproc: "\\b(package|import|const|var|struct|func|go|defer)\\b"
    - symbol.operator: "[-+/*=<>!~%&|^]|:="
    - package:
        start: "package\\s"
        end: "$"
        rules:
            - package.name: "(.*)"
    - custom.type:
        start: "type\\s"
        end: "\\s"
        rules:
            - custom.type.name: "(.*)"

      # Types
    - symbol: "(,|\\.)"
    - type: "\\b(u?int(8|16|32|64)?|float(32|64)|complex(64|128))\\b"
    - type: "\\b(uintptr|byte|rune|string|interface|bool|map|chan|error)\\b"
    - type.keyword: "\\b(struct)\\b"
    - constant.bool: "\\b(true|false|nil)\\b"

      # Brackets
    - symbol.brackets: "(\\{|\\})"
    - symbol.brackets: "(\\(|\\))"
    - symbol.brackets: "(\\[|\\])"

      # Numbers and strings
    - constant.number: "\\b([0-9]+|0x[0-9a-fA-F]*|iota)\\b|'.'"

    - constant.string:
        start: "\""
        end: "\""
        skip: "\\\\."
        rules:
            - constant.specialChar: "%."
            - constant.specialChar: "\\\\[abfnrtv'\\\"\\\\]"
            - constant.specialChar: "\\\\([0-7]{3}|x[A-Fa-f0-9]{2}|u[A-Fa-f0-9]{4}|U[A-Fa-f0-9]{8})"

    - constant.string:
        start: "'"
        end: "'"
        skip: "\\\\."
        rules:
            - error: "..+"
            - constant.specialChar: "%."
            - constant.specialChar: "\\\\[abfnrtv'\\\"\\\\]"
            - constant.specialChar: "\\\\([0-7]{3}|x[A-Fa-f0-9]{2}|u[A-Fa-f0-9]{4}|U[A-Fa-f0-9]{8})"

    - constant.string:
        start: "`"
        end: "`"
        rules: []

    - comment:
        start: "//"
        end: "$"
        rules:
            - todo: "(TODO|XXX|FIXME):?"

    - comment:
        start: "/\\*"
        end: "\\*/"
        rules:
            - todo: "(TODO|XXX|FIXME):?"
